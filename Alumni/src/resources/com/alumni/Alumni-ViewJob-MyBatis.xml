<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ViewJob">

	<select id="getalljobs" parameterType="map"
		resultType="ViewJobModel">
		select distinct id,
		title,company_name,location,contact_email,min_exp,max_exp,description,std_id,date_added
		as created_date,status
		from alumni.jobs where std_id != #{std_id} order
		by id;
	</select>

	<select id="getallinternships" parameterType="map"
		resultType="ViewJobModel">
		select distinct id,
		title,company_name,location,contact_email,duration,description,std_id,date_added
		as created_date,status
		from alumni.interships where std_id != #{std_id}
		order by id;
	</select>

	<select id="getmyjobs" parameterType="map"
		resultType="ViewJobModel">
		select distinct id,
		title,company_name,location,contact_email,min_exp,max_exp,description,std_id,date_added
		as created_date,status
		from alumni.jobs where std_id = #{std_id} order
		by id;
	</select>

	<select id="getmyinternships" parameterType="map"
		resultType="ViewJobModel">
		select distinct id,
		title,company_name,location,contact_email,duration,description,std_id,date_added
		as created_date,status
		from alumni.interships where std_id = #{std_id}
		order by id;
	</select>

	<select id="getalljobshome" resultType="map">
		select distinct id,
		title,company_name,location,contact_email,min_exp,max_exp,description,std_id,date_added
		as created_date,status
		from alumni.jobs order by id;
	</select>

	<select id="getallinternshipshome" resultType="map">
		select distinct
		id,
		title,company_name,location,contact_email,duration,description,std_id,date_added
		as created_date,status
		from alumni.interships order by id;
	</select>

	<select id="getallOpenJobs" resultType="map">
		select distinct
		a.id,a.title,a.company_name,a.location,a.contact_email,a.min_exp,a.max_exp,a.description,a.date_added
		:: date as created_date,
		case when a.status = 3 then 'Closed' else
		'Open' end as status_type, s.first_name as created_by from alumni.jobs
		a inner join alumni.students s on a.std_id = s.user_id where a.status
		not in (3,2) Order by a.id;
	</select>

	<select id="getallClosedJobs" resultType="map">
		select distinct
		a.id,a.title,a.company_name,a.location,a.contact_email,a.min_exp,a.max_exp,a.description,a.date_added
		:: date as created_date,
		case when a.status = 3 then 'Closed' else
		'Open' end as status_type, s.first_name as created_by from alumni.jobs
		a inner join alumni.students s on a.std_id = s.user_id where a.status
		= 3 Order by a.id;
	</select>

	<update id="changeJobStatus" parameterType="map">
		update alumni.jobs
		SET status = 3,closed_date = CURRENT_TIMESTAMP where id = #{p.id}
	</update>

	<!-- ............................................. Intern Actions ................................. -->

	<select id="getallOpenInterns" resultType="map">
		select distinct
		a.id,a.title,a.company_name,a.location,a.contact_email,a.duration,a.description,a.date_added
		:: date as created_date,
		case when a.status = 3 then 'Closed' else
		'Open' end as status_type, s.first_name as created_by from
		alumni.interships a inner join alumni.students s on a.std_id =
		s.user_id where a.status not in (3,2) Order by a.id;
	</select>

	<select id="getallClosedInterns" resultType="map">

		select distinct
		a.id,a.title,a.company_name,a.location,a.contact_email,a.duration,a.description,a.date_added
		:: date as created_date,
		case when a.status = 3 then 'Closed' else
		'Open' end as status_type, s.first_name as created_by from
		alumni.interships a inner join alumni.students s on a.std_id =
		s.user_id where a.status = 3 Order by a.id;
	</select>

	<update id="changeInternStatus" parameterType="map">
		update
		alumni.interships
		SET status = 3,closed_date = CURRENT_TIMESTAMP where
		id = #{p.id}
	</update>


	<insert id="InsertApplyjob" parameterType="map">
		INSERT INTO
		alumni.applied_jobs(std_id,date_added,job_id)
		VALUES
		(#{p.std_id},CURRENT_TIMESTAMP,#{p.id});
	</insert>



	<insert id="InsertApplyinternship" parameterType="map">
		INSERT INTO
		alumni.applied_internships(std_id,date_added,internship_id)
		VALUES
		(#{p.std_id},CURRENT_TIMESTAMP,#{p.id});
	</insert>


	<!-- ............................................. Intern Applicants ................................. -->
	
	<select id="InternshipApplicants" resultType="ViewJobModel">
		select s.first_name,s.email,s.mobile_no,ai.date_added :: date as date_created from 
		alumni.applied_internships ai inner join 
		alumni.students s on ai.std_id = s.user_id where ai.id=#{id}
	</select>

</mapper>  