<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="AlumniRegister">


	<select id="getAlumniCount" resultType="java.lang.Integer">
		SELECT count(id)+1 as
		count from alumni.students;
	</select>

	<insert id="InsertAlumniStudent" parameterType="map">
		INSERT INTO
		alumni.students(username, first_name, last_name,
		password,email,mobile_no,status,college_code,user_id,
		qualification,branch,passed_out_year,district,other_qualifiction,roll_number,role_id,token,mail_verify)
		VALUES
		(#{p.username},#{p.first_name},#{p.last_name},md5(#{p.password}),#{p.email},#{p.mobile_no},0,#{p.college_code},
		('AS' || '' ||lpad(CAST( #{id} AS character varying
		),4,'0')),#{p.qualification},#{p.branch},#{p.passed_out_year},
		#{p.district},#{p.other_qualifiction},#{p.roll_number},6,#{p.token},false);
	</insert>

	<insert id="InsertAlumniEmployee" parameterType="map">
		INSERT INTO
		alumni.students(username, first_name, last_name,
		password,email,mobile_no,status,organization_name,user_id,employee_id,role_id,token,mail_verify,mentorship)
		VALUES
		(#{p.username},#{p.first_name},#{p.last_name},md5(#{p.password}),#{p.email},#{p.mobile_no},0,
		#{p.organization_name},('AE' || '' ||lpad(CAST( #{id} AS character
		varying
		),4,'0')),#{p.employee_id},5,#{p.token},false,#{p.mentorship});
	</insert>

	<insert id="InsertAlumniUserEmployee" parameterType="map">
		INSERT INTO
		alumni.users(username, password, role_id, status, user_id)
		VALUES
		(#{p.username}, md5(#{p.password}),5, true,('AE' || '' ||lpad(CAST(
		#{id} AS character varying ),4,'0')));
	</insert>

	<insert id="InsertAlumniUserStudent" parameterType="map">
		INSERT INTO
		alumni.users(username, password, role_id, status, user_id)
		VALUES
		(#{p.username}, md5(#{p.password}),6, true,('AS' || '' ||lpad(CAST(
		#{id} AS character varying ),4,'0')));
	</insert>

	<select id="getAllAlumnisData" resultType="AlumniRegister">
		SELECT id,username,
		first_name, last_name, password,email,mobile_no, ,status from
		alumni.students order by id;
	</select>


	<!-- ....................................... role assaign ............................... -->
	<insert id="InsertAlumniAdmin" parameterType="map">
		INSERT INTO
		alumni.students(role_id,username, first_name, last_name,
		password,email,mobile_no,status,user_id)
		VALUES
		(1,#{p.username},#{p.first_name},#{p.last_name},md5(#{p.password}),#{p.email},#{p.mobile_no},2,
		('AD' || '' ||lpad(CAST( #{id} AS character varying ),4,'0')));
	</insert>

	<insert id="InsertAlumniUserAdmin" parameterType="map">
		INSERT INTO
		alumni.users(username, password, role_id, status, user_id)
		VALUES
		(#{p.username}, md5(#{p.password}),1, true,('AD' || '' ||lpad(CAST(
		#{id} AS character varying ),4,'0')));
	</insert>

	<insert id="InsertAlumniMdCEO" parameterType="map">
		INSERT INTO
		alumni.students(role_id,username, first_name, last_name,
		password,email,mobile_no,status,user_id)
		VALUES
		(2,#{p.username},#{p.first_name},#{p.last_name},md5(#{p.password}),#{p.email},#{p.mobile_no},2,
		('MDCEO' || '' ||lpad(CAST( #{id} AS character varying ),4,'0')));
	</insert>

	<insert id="InsertAlumniUserMdCEO" parameterType="map">
		INSERT INTO
		alumni.users(username, password, role_id, status, user_id)
		VALUES
		(#{p.username}, md5(#{p.password}),2, true,('MDCEO' || '' ||lpad(CAST(
		#{id} AS character varying ),4,'0')));
	</insert>

	<insert id="InsertAlumniED" parameterType="map">
		INSERT INTO
		alumni.students(role_id,username, first_name, last_name,
		password,email,mobile_no,status,user_id)
		VALUES
		(3,#{p.username},#{p.first_name},#{p.last_name},md5(#{p.password}),#{p.email},#{p.mobile_no},2,
		('ED' || '' ||lpad(CAST( #{id} AS character varying ),4,'0')));
	</insert>

	<insert id="InsertAlumniUserED" parameterType="map">
		INSERT INTO
		alumni.users(username, password, role_id, status, user_id)
		VALUES
		(#{p.username}, md5(#{p.password}),3, true,('ED' || '' ||lpad(CAST(
		#{id} AS character varying ),4,'0')));
	</insert>

	<insert id="InsertAlumniCGM" parameterType="map">
		INSERT INTO
		alumni.students(role_id,username, first_name, last_name,
		password,email,mobile_no,status,user_id)
		VALUES
		(4,#{p.username},#{p.first_name},#{p.last_name},md5(#{p.password}),#{p.email},#{p.mobile_no},4,
		('CGM' || '' ||lpad(CAST( #{id} AS character varying ),4,'0')));
	</insert>

	<insert id="InsertAlumniUserCGM" parameterType="map">
		INSERT INTO
		alumni.users(username, password, role_id, status, user_id)
		VALUES
		(#{p.username}, md5(#{p.password}),4, true,('CGM' || '' ||lpad(CAST(
		#{id} AS character varying ),4,'0')));
	</insert>


	<!-- Verify User -->

	<update id="verifyToken" parameterType="java.lang.Integer">
		update alumni.students
		set mail_verify = true, status = 1 where token=#{token} and
		mail_verify = false;
	</update>

	<select id="getEmail" parameterType="java.lang.Integer"
		resultType="java.lang.String">
		select email from
		alumni.students where
		token=#{token} and
		mail_verify = true ;
	</select>

	<select id="getPassword" parameterType="java.lang.Integer"
		resultType="java.lang.String">
		select mobile_no :: Character Varying from
		alumni.students
		where
		token=#{token}
		and mail_verify = true ;
	</select>

	<select id="getEmailbyId" parameterType="java.lang.Integer"
		resultType="java.lang.String">
		select email from
		alumni.students where
		id=#{id};
	</select>

	<select id="getPasswordbyId" parameterType="java.lang.Integer"
		resultType="java.lang.String">
		select mobile_no :: Character Varying from
		alumni.students
		where
		id=#{id};
	</select>

	<insert id="AddvolunteershipRegister" parameterType="map">
		INSERT INTO
		alumni.students(user_id,first_name, last_name,
		email,mobile_no,college_code,
		qualification,branch,passed_out_year,district,other_qualifiction,roll_number,technologies_id
		)
		VALUES
		(#{p.std_id},#{p.first_name},#{p.last_name},#{p.email},#{p.mobile_no},#{p.college_code},
		#{p.qualification},#{p.branch},#{p.passed_out_year},
		#{p.district},#{p.other_qualifiction},#{p.roll_number},#{p.id});
	</insert>

	<select resultType="java.lang.Integer" parameterType="map"
		id="checkMail">
		select count(*) as mail_count from alumni.students where email =
		#{p.email};
	</select>

	<select resultType="java.lang.Integer" parameterType="map"
		id="checkMobile">
		select count(*) as mail_count from alumni.students where mobile_no
		=
		#{p.mobile_no};
	</select>


	<!-- Roles -->
	<insert id="AddRole" parameterType="map">
		INSERT INTO
		alumni.roles(role_name) VALUES (#{p.role_name});
	</insert>

	<!-- getting all roles -->
	<select id="getallroles" resultType="AlumniRegister">
		select id as
		role_id,role_name from alumni.roles order by id;
	</select>

	<!-- getting role data in pop up -->
	<select id="getRoleData" resultType="AlumniRegister">
		SELECT id,role_name,role_id
		from alumni.roles WHERE id = #{role_id};
	</select>

	<!-- update role data -->
	<update id="updateRole" parameterType="map">
		update alumni.roles SET
		role_name = #{p.role_name} where id = #{p.id}
	</update>

	<!-- deleting role -->
	<delete id="DeleteRoleData" parameterType="java.lang.Integer">
		Delete from
		alumni.roles where id = #{role_id};
	</delete>

	<!-- OTP Update -->
	<update id="updateotp" parameterType="map">
		UPDATE alumni.users
		SET
		otp=#{p.otp}
		WHERE username =#{p.email};
	</update>

	<select resultType="java.lang.Integer" parameterType="map"
		id="verifyOtp">
		SELECT count(*) as count FROM alumni.users WHERE otp=#{p.otp} and
		username = #{p.email};
	</select>

	<update id="updatePassword" parameterType="map">
		update alumni.users
		SET
		password = md5(#{p.password}) where username =#{p.email};
	</update>

</mapper>